{"$message_type":"diagnostic","message":"module `GenTrade` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":273,"byte_end":281,"line_start":15,"line_end":15,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"pub mod GenTrade;","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":273,"byte_end":281,"line_start":15,"line_end":15,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"pub mod GenTrade;","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"gen_trade","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `GenTrade` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:15:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod GenTrade;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `gen_trade`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":4974,"byte_end":4983,"line_start":157,"line_end":157,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(noop_method_call)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":4974,"byte_end":4983,"line_start":157,"line_end":157,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:157:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(noop_method_call)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":5059,"byte_end":5068,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":5059,"byte_end":5068,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:158:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6051,"byte_end":6060,"line_start":192,"line_end":192,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6051,"byte_end":6060,"line_start":192,"line_end":192,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:192:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6136,"byte_end":6145,"line_start":193,"line_end":193,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6136,"byte_end":6145,"line_start":193,"line_end":193,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:193:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4855,"byte_end":4864,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4855,"byte_end":4864,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/public_encryptions/elgamal/constraints.rs:158:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4940,"byte_end":4949,"line_start":159,"line_end":159,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4940,"byte_end":4949,"line_start":159,"line_end":159,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/public_encryptions/elgamal/constraints.rs:159:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `test_GenTrade` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/gentrade/tests/test_gentrade.rs","byte_start":1138,"byte_end":1151,"line_start":41,"line_end":41,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn test_GenTrade() {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/gentrade/tests/test_gentrade.rs","byte_start":1138,"byte_end":1151,"line_start":41,"line_end":41,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn test_GenTrade() {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":"test_gen_trade","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `test_GenTrade` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gentrade/tests/test_gentrade.rs:41:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn test_GenTrade() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `test_gen_trade`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CRS_size` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/gentrade/tests/test_gentrade.rs","byte_start":1802,"byte_end":1810,"line_start":62,"line_end":62,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/gentrade/tests/test_gentrade.rs","byte_start":1802,"byte_end":1810,"line_start":62,"line_end":62,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"crs_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CRS_size` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gentrade/tests/test_gentrade.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `crs_size`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `test_GenTrade` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/GenTrade/tests/test_gentrade.rs","byte_start":1138,"byte_end":1151,"line_start":41,"line_end":41,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn test_GenTrade() {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/GenTrade/tests/test_gentrade.rs","byte_start":1138,"byte_end":1151,"line_start":41,"line_end":41,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn test_GenTrade() {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":"test_gen_trade","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `test_GenTrade` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/GenTrade/tests/test_gentrade.rs:41:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn test_GenTrade() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `test_gen_trade`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CRS_size` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/GenTrade/tests/test_gentrade.rs","byte_start":1802,"byte_end":1810,"line_start":62,"line_end":62,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/GenTrade/tests/test_gentrade.rs","byte_start":1802,"byte_end":1810,"line_start":62,"line_end":62,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"crs_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CRS_size` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/GenTrade/tests/test_gentrade.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `crs_size`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"11 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 11 warnings emitted\u001b[0m\n\n"}
