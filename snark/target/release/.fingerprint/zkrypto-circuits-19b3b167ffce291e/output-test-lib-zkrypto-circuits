{"$message_type":"diagnostic","message":"unused import: `libc::ELAST`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":1143,"byte_end":1154,"line_start":26,"line_end":26,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use libc::ELAST;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":1139,"byte_end":1155,"line_start":26,"line_end":26,"column_start":1,"column_end":17,"is_primary":true,"text":[{"text":"use libc::ELAST;","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `libc::ELAST`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/accepttrade/circuit.rs:26:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse libc::ELAST;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `pkbuyer_point_y`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14031,"byte_end":14046,"line_start":392,"line_end":392,"column_start":31,"column_end":46,"is_primary":true,"text":[{"text":"        let (pkbuyer_point_x, pkbuyer_point_y) = pkbuyer.xy().unwrap();","highlight_start":31,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14031,"byte_end":14046,"line_start":392,"line_end":392,"column_start":31,"column_end":46,"is_primary":true,"text":[{"text":"        let (pkbuyer_point_x, pkbuyer_point_y) = pkbuyer.xy().unwrap();","highlight_start":31,"highlight_end":46}],"label":null,"suggested_replacement":"_pkbuyer_point_y","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pkbuyer_point_y`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/accepttrade/circuit.rs:392:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (pkbuyer_point_x, pkbuyer_point_y) = pkbuyer.xy().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pkbuyer_point_y`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `pkseller_point_y`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14197,"byte_end":14213,"line_start":395,"line_end":395,"column_start":32,"column_end":48,"is_primary":true,"text":[{"text":"        let (pkseller_point_x, pkseller_point_y) = pkseller.xy().unwrap();","highlight_start":32,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14197,"byte_end":14213,"line_start":395,"line_end":395,"column_start":32,"column_end":48,"is_primary":true,"text":[{"text":"        let (pkseller_point_x, pkseller_point_y) = pkseller.xy().unwrap();","highlight_start":32,"highlight_end":48}],"label":null,"suggested_replacement":"_pkseller_point_y","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pkseller_point_y`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/accepttrade/circuit.rs:395:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m395\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (pkseller_point_x, pkseller_point_y) = pkseller.xy().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pkseller_point_y`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `pkseller_point_x`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14253,"byte_end":14269,"line_start":396,"line_end":396,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let pkseller_point_x = Self::F::from_bigint(pkseller_point_x.into_bigint()).unwrap();","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/accepttrade/circuit.rs","byte_start":14253,"byte_end":14269,"line_start":396,"line_end":396,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        let pkseller_point_x = Self::F::from_bigint(pkseller_point_x.into_bigint()).unwrap();","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":"_pkseller_point_x","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pkseller_point_x`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/accepttrade/circuit.rs:396:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m396\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pkseller_point_x = Self::F::from_bigint(pkseller_point_x.into_bigint()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pkseller_point_x`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":4974,"byte_end":4983,"line_start":157,"line_end":157,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(noop_method_call)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":4974,"byte_end":4983,"line_start":157,"line_end":157,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:157:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let h0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(noop_method_call)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":5059,"byte_end":5068,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":5059,"byte_end":5068,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:158:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let h1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6051,"byte_end":6060,"line_start":192,"line_end":192,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6051,"byte_end":6060,"line_start":192,"line_end":192,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:192:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c0 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6136,"byte_end":6145,"line_start":193,"line_end":193,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs","byte_start":6136,"byte_end":6145,"line_start":193,"line_end":193,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/nullifiable_encryptions/elgamalnenc/constraints.rs:193:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4855,"byte_end":4864,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4855,"byte_end":4864,"line_start":158,"line_end":158,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/public_encryptions/elgamal/constraints.rs:158:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c1 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().0), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.borrow()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4940,"byte_end":4949,"line_start":159,"line_end":159,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/gadget/public_encryptions/elgamal/constraints.rs","byte_start":4940,"byte_end":4949,"line_start":159,"line_end":159,"column_start":64,"column_end":73,"is_primary":true,"text":[{"text":"        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;","highlight_start":64,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.borrow()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gadget/public_encryptions/elgamal/constraints.rs:159:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let c2 = GG::new_variable(cs.clone(), || prep.map(|g| g.borrow().1), mode)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` does not implement `Borrow`, so calling `borrow` on `&(<C as CurveGroup>::Affine, <C as CurveGroup>::Affine)` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CRS_size` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/accepttrade/tests/test_accepttrade.rs","byte_start":1883,"byte_end":1891,"line_start":63,"line_end":63,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/accepttrade/tests/test_accepttrade.rs","byte_start":1883,"byte_end":1891,"line_start":63,"line_end":63,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"crs_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CRS_size` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/accepttrade/tests/test_accepttrade.rs:63:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let CRS_size = mem::size_of_val(&pk) + mem::size_of_val(&vk);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `crs_size`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"11 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 11 warnings emitted\u001b[0m\n\n"}
